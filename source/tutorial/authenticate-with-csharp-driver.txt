:orphan:

==========================================
Authenticate to MongoDB with the C# Driver
==========================================

.. important:: This document reflects an unreleased version of the
   C# Driver and the 2.3/2.4 subscriber edition of MongoDB, which is
   currently a release candidate.

This page is a brief overview of authenticating to a MongoDB cluster
with the MongoDB C# Driver using version 1.8 and above.

Normal Authentication
---------------------

To authenticate as the user "user1" with a password of "password1",
defined in the "test" database:

.. code-block:: csharp

    using MongoDB.Driver; com.mongodb.MongoClient;

    MongoCredential credential = MongoCredential.CreateMongoCRCredential("test", "user1", "password1");

    MongoClientSettings settings = new MongoClientSettings
    {
        Credentials = new[] { credential }
    };

    MongoClient mongoClient = new MongoClient(settings);

Alternatively, when you only need a single user, it is possible to
specify this in the connection string.

.. code-block:: csharp

    string connectionString = "mongodb://user1:password1@localhost";

    MongoClient mongoClient = new MongoClient(connectionString);

In some cases you may need to authenticate as multiple users in
different databases. For example, imagine a map/reduce job that reads
from the database "first" and writes the results to the database
"second".  You may need to authenticate one user defined in the
"first" database and another in the "second":

.. code-block:: csharp

   MongoCredential credentialFirst = MongoCredential.CreateMongoCRCredential("first", "user1", "password1");
   MongoCredential credentialSecond = MongoCredential.CreateMongoCRCredential("second", "user2", "password2");

   MongoClientSettings settings = new MongoClientSettings
   {
        Credentials = new[] { credentiaFirst, credentialSecond }
   };

   MongoClient mongoClient = new MongoClient(settings);

.. note::

   As of the 2.4 MongoDB release, this is no longer necessary, since you
   are able to define a user in one database and delegate privileges
   for that user in another database.

Kerberos Authentication
-----------------------

To authenticate to a MongoDB cluster using Kerberos, you must specify
the GSSAPI mechanism and a user name.  On windows, it is also possible
to provide the password.

Fundamentally, the process for connecting with Kerberos is the same
for Windows and Linux systems; however, Linux systems require the use 
of ``kinit`` to initialize the security credentials whereas Windows
systems perform this action transparently using SSPI based on the account 
running the current process (unless a password was provided in which a 
new credentials are created on demand).

The below examples work on both Windows and Linux systems.

.. code-block:: csharp

   string connectionString = "mongodb://user%40REALM.COM@localhost/?authMechanism=GSSAPI";

   MongoClient client = new MongoClient(connectionString);

.. note::

   ``%40`` is the url encoded representation of the '@' character.

Alternatively, you can specify the authentication mechanism in the
code, as in both of the following:

.. code-block:: csharp

    MongoCredential credential = MongoCredential.CreateGssapiCredential("user@REALM.COM");

    MongoClientSettings settings = new MongoClientSettings
    {
        Credentials = new[] { credential }
    };

    MongoClient mongoClient = new MongoClient(settings);

Linux Systems
~~~~~~~~~~~~~

Unlike Windows, Kerberos authentication in linux is not built-in to the 
operating system and requires the use of an external library.  Libgsasl
is the native library used by both the mongodb server as well as the .NET
driver.  

Mono, the open source platform used to run the .NET driver on linux, 
provides a way to map the hard-coded names of native libraries to their
actual names, which are different based on your distribution.  The documentation
for this feature is located here: http://www.mono-project.com/Config_DllMap.

Specifically for the .NET driver, the library that needs to be mapped is called
``libgsasl-7.dll``.  An example configuration for ubuntu looks like this:

.. code-block:: xml

    <configuration>
      <dllmap dll="libgsasl-7.dll" target="libgsasl.so.7" />
    </configuration>

This file should be called ``MongoDB.Driver.dll.config`` and placed beside the 
``MongoDB.Driver.dll`` assembly.