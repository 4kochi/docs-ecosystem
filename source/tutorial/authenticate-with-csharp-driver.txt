:orphan:

================================
Getting Started with Csharp Driver
================================

.. important:: This document reflects an unreleased version of the
   C# Driver and the 2.3/2.4 subscriber edition of MongoDB, which is
   currently a release candidate.

This page is a brief overview of authenticating to a MongoDB cluster
with the MongoDB C# Driver using version 1.8 and above.

Normal Authentication
---------------------

To authenticate as the user "user1" with a password of "password1",
defined in the "test" database:

.. code-block:: csharp

    using MongoDB.Driver; com.mongodb.MongoClient;

    MongoCredential credential = MongoCredential.CreateMongoCRCredential("test", "user1", "password1");

    MongoClientSettings settings = new MongoClientSettings
    {
        Credentials = new[] { credential }
    };

    MongoClient mongoClient = new MongoClient(settings);

Alternatively, when you only need a single user, it is possible to
specify this in the connection string.

.. code-block:: csharp

    string connectionString = "mongodb://user1:password1@localhost";

    MongoClient mongoClient = new MongoClient(connectionString);

In some cases you may need to authenticate as multiple users in
different databases. For example, imagine a map/reduce job that reads
from the database "first" and writes the results to the database
"second".  You may need to authenticate one user defined in the
"first" database and another in the "second":

.. code-block:: csharp

   MongoCredential credentialFirst = MongoCredential.CreateMongoCRCredential("first", "user1", "password1");
   MongoCredential credentialSecond = MongoCredential.CreateMongoCRCredential("second", "user2", "password2");

   MongoClientSettings settings = new MongoClientSettings
   {
        Credentials = new[] { credentiaFirst, credentialSecond }
   };

   MongoClient mongoClient = new MongoClient(settings);

.. note::

   As of the 2.4 MongoDB release, this is no long necessary, since you
   are able to define a user in one database and delegate privileges
   for that user in another database.

Kerberos Authentication
-----------------------

To authenticate to a MongoDB cluster using Kerberos, you must specify
the GSSAPI mechanism and optionally a user name and password.  If you
do not specify a user name and password, the driver will attempt to
use the cached credentials under which the process is executing.

Fundamentally, the process for connecting with Kerberos is the same
for Windows and Linux systems; however, Linux systems use ``kinit``
and Windows systems specify a password when configuring the client.

Windows Systems
~~~~~~~~~~~~~~~

You can specify the authentication mechanism using a connection
string. The following two examples are equivalent:

.. code-block:: csharp

   string connectionString = "mongodb://localhost/?authMechanism=GSSAPI";

   MongoClient client = new MongoClient(connectionString);

.. code-block:: csharp

   string connectionString = "mongodb://user%40REALM.COM:password@localhost/?authMechanism=GSSAPI";

   MongoClient client = new MongoClient(connectionString);

.. note::

   ``%40`` is the url encoded representation of the '@' character.

Alternatively, you can specify the authentication mechanism in the
code, as in both of the following:

.. code-block:: csharp

    MongoCredential credential = MongoCredential.CreateGssapiCredential();

    MongoClientSettings settings = new MongoClientSettings
    {
        Credentials = new[] { credential }
    };

    MongoClient mongoClient = new MongoClient(settings);

.. code-block:: csharp

   MongoCredential credential = MongoCredential.CreateGssapiCredential("user@REALM.COM", "password");

   MongoClientSettings settings = new MongoClientSettings
   {
        Credentials = new[] { credential }
   };

   MongoClient mongoClient = new MongoClient(settings);

Linux Systems
~~~~~~~~~~~~~

To use the C# driver on Linux systems:

#. Do not specify a password.

#. You *must* acquire an authentication ticket using ``kinit`` before
   attempting to authenticate.

You can specify the authentication mechanism using a connection
string. The following two examples are equivalent:

.. code-block:: csharp

   string connectionString = "mongodb://localhost/?authMechanism=GSSAPI";

   MongoClient client = new MongoClient(connectionString);

.. code-block:: csharp

   string connectionString = "mongodb://user%40REALM.COM@localhost/?authMechanism=GSSAPI";

   MongoClient client = new MongoClient(connectionString);

.. note::

   ``%40`` is the url encoded representation of the '@' character.

Alternatively, you can specify the authentication mechanism in the
code, as in both of the following:

.. code-block:: csharp

    MongoCredential credential = MongoCredential.CreateGssapiCredential();

    MongoClientSettings settings = new MongoClientSettings
    {
        Credentials = new[] { credential }
    };

    MongoClient mongoClient = new MongoClient(settings);

.. code-block:: chsarp

    MongoCredential credential = MongoCredential.CreateGssapiCredential("user@REALM.COM");

    MongoClientSettings settings = new MongoClientSettings
    {
        Credentials = new[] { credential }
    };

    MongoClient mongoClient = new MongoClient(settings);

.. note:: Because users authenticate using ``kinit`` on Linux systems
   do not require the password or database names.
